{"version":3,"sources":["../src/combineReducers.js"],"names":["reducers","reducerKeys","Object","keys","inputState","Map","action","process","env","NODE_ENV","warningMessage","console","error","withMutations","temporaryState","forEach","reducerName","reducer","currentDomainState","get","nextDomainState","set"],"mappings":";;;;;;AAAA;;;;AACA;;;;kBAKe,UAACA,QAAD,EAAgC;AAC7C,MAAMC,cAAcC,OAAOC,IAAP,CAAYH,QAAZ,CAApB;;AAEA;AACA,SAAO,YAAiF;AAAA,QAAhFI,UAAgF,uEAAnD,oBAAUC,GAAV,EAAmD;AAAA,QAAlCC,MAAkC;;AACtF;AACA,QAAIC,QAAQC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAMC,iBAAiB,wDAAwCN,UAAxC,EAAoDJ,QAApD,EAA8DM,MAA9D,CAAvB;;AAEA,UAAII,cAAJ,EAAoB;AAClB;AACAC,gBAAQC,KAAR,CAAcF,cAAd;AACD;AACF;;AAED,WAAON,WACJS,aADI,CACU,UAACC,cAAD,EAAoB;AACjCb,kBAAYc,OAAZ,CAAoB,UAACC,WAAD,EAAiB;AACnC,YAAMC,UAAUjB,SAASgB,WAAT,CAAhB;AACA,YAAME,qBAAqBJ,eAAeK,GAAf,CAAmBH,WAAnB,CAA3B;AACA,YAAMI,kBAAkBH,QAAQC,kBAAR,EAA4BZ,MAA5B,CAAxB;;AAEA,0CAAkBc,eAAlB,EAAmCJ,WAAnC,EAAgDV,MAAhD;;AAEAQ,uBAAeO,GAAf,CAAmBL,WAAnB,EAAgCI,eAAhC;AACD,OARD;AASD,KAXI,CAAP;AAYD,GAvBD;AAwBD,C","file":"combineReducers.js","sourcesContent":["import Immutable from 'immutable';\nimport {\n  getUnexpectedInvocationParameterMessage,\n  validateNextState\n} from './utilities';\n\nexport default (reducers: Object): Function => {\n  const reducerKeys = Object.keys(reducers);\n\n  // eslint-disable-next-line space-infix-ops\n  return (inputState: ?Immutable.Map = Immutable.Map(), action: Object): Immutable.Map => {\n    // eslint-disable-next-line no-process-env\n    if (process.env.NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedInvocationParameterMessage(inputState, reducers, action);\n\n      if (warningMessage) {\n        // eslint-disable-next-line no-console\n        console.error(warningMessage);\n      }\n    }\n\n    return inputState\n      .withMutations((temporaryState) => {\n        reducerKeys.forEach((reducerName) => {\n          const reducer = reducers[reducerName];\n          const currentDomainState = temporaryState.get(reducerName);\n          const nextDomainState = reducer(currentDomainState, action);\n\n          validateNextState(nextDomainState, reducerName, action);\n\n          temporaryState.set(reducerName, nextDomainState);\n        });\n      });\n  };\n};\n"]}